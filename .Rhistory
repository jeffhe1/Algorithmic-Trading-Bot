# Load Dependencies
library(tidyverse)
library(dplyr)
library(data.table)
df <- read.csv("TSLA.1D.csv")
# Constructing data set
newdf <- df[,colSums(is.na(df))==0] # Drop columns with NaN
newdf = newdf %>%  # Try to predict tommorrow's change with technical indicators
mutate(tmrchange = shift(close-open, n=-1L, fill=NA)) %>%
select(!time)
scaled.df <- scale(newdf)
# Construct linear model
model <- lm(tmrchange ~ ., data=newdf)
summary(model)
# Constructing data set
newdf <- df[,colSums(is.na(df))==0] # Drop columns with NaN
newdf = newdf %>%  # Try to predict tommorrow's change with technical indicators
mutate(tmrchange = shift(close-open, n=-1L, fill=NA)) %>%
select(!c(time,Signmal))
# Constructing data set
newdf <- df[,colSums(is.na(df))==0] # Drop columns with NaN
newdf = newdf %>%  # Try to predict tommorrow's change with technical indicators
mutate(tmrchange = shift(close-open, n=-1L, fill=NA)) %>%
select(!c(time,Signal))
scaled.df <- scale(newdf)
# Construct linear model
model <- lm(tmrchange ~ ., data=newdf)
summary(model)
# Constructing data set
newdf <- df[,colSums(is.na(df))==0] # Drop columns with NaN
newdf = newdf %>%  # Try to predict tommorrow's change with technical indicators
mutate(tmrchange = shift(close-open, n=-1L, fill=NA)) %>%
select(!c(time,Signal,open,high,low,close))
scaled.df <- scale(newdf)
# Construct linear model
model <- lm(tmrchange ~ ., data=newdf)
summary(model)
# Using stepwise selection
stepmodel <- step(model, scope=~.)
summary(stepmodel)
plot(stepmodel)
# Load Dependencies
library(tidyverse)
library(dplyr)
library(data.table)
df <- read.csv("/data/TSLA.1D.csv")
# Load Dependencies
library(tidyverse)
library(dplyr)
library(data.table)
df <- read.csv("./data/TSLA.1D.csv")
plot(stepmodel)
summary(stepmodel)
# Constructing data set
newdf <- df[,colSums(is.na(df))==0] # Drop columns with NaN
newdf = newdf %>%  # Try to predict tommorrow's change with technical indicators
mutate(tmrchange = shift(close-open, n=-1L, fill=NA)) %>%
select(!c(time,Signal,open,high,low,close))
scaled.df <- data.frame(scale(newdf))
# Constructing data set
newdf <- df[,colSums(is.na(df))==0] # Drop columns with NaN
newdf = newdf %>%  # Try to predict tommorrow's change with technical indicators
mutate(tmrchange = shift(close-open, n=-1L, fill=NA)) %>%
select(!c(time,Signal,open,high,low,close))
newdf <- data.frame(scale(newdf))
# Load Dependencies and data
library(tidyverse)
library(dplyr)
library(data.table)
df <- read.csv("./data/TSLA.1D.csv")
# Constructing data set
newdf <- df[,colSums(is.na(df))==0] # Drop columns with NaN
newdf = newdf %>%  # Try to predict tommorrow's change with technical indicators
mutate(tmrchange = shift(close-open, n=-1L, fill=NA)) %>%
select(!c(time,Signal,open,high,low,close))
newdf <- data.frame(scale(newdf))
# Construct linear model
model <- lm(tmrchange ~ ., data=newdf)
summary(model)
# Using stepwise selection
stepmodel <- step(model, scope=~.)
summary(stepmodel)
plot(y=newdf$tmrchange)
summary(stepmodel)
plot(x=1:length(newdf),y=newdf$tmrchange)
summary(stepmodel)
plot(x=1:length(newdf)+1,y=newdf$tmrchange)
summary(stepmodel)
plot(x=1:length(newdf)-1,y=newdf$tmrchange)
summary(stepmodel)
plot(x=1:768,y=newdf$tmrchange)
summary(stepmodel)
plot(x=1:768,y=newdf$tmrchange)
abline(stepmodel)
# Constructing data set
newdf <- df[,colSums(is.na(df))==0] # Drop columns with NaN
newdf = newdf %>%  # Try to predict tommorrow's change with technical indicators
mutate(tmrchange = shift(close-open, n=-1L, fill=NA)) %>%
select(!c(time,Signal,open,high,low,close))
newdf[,1:24] <- data.frame(scale(newdf))[,1:24]
# Construct linear model
model <- lm(tmrchange ~ ., data=newdf)
# Constructing data set
newdf <- df[,colSums(is.na(df))==0] # Drop columns with NaN
newdf = newdf %>%  # Try to predict tommorrow's change with technical indicators
mutate(tmrchange = shift(close-open, n=-1L, fill=NA)) %>%
select(!c(time,open,high,low,close))
newdf[,1:24] <- data.frame(scale(newdf))[,1:24]
# Construct linear model
model <- lm(tmrchange ~ ., data=newdf)
# Construct linear model
model <- lm(tmrchange ~ ., data=newdf)
summary(model)
# Constructing data set
newdf <- df[,colSums(is.na(df))==0] # Drop columns with NaN
newdf = newdf %>%  # Try to predict tommorrow's change with technical indicators
mutate(tmrchange = shift(close-open, n=-1L, fill=NA)) %>%
select(!c(time,Signal,open,high,low,close))
newdf[,1:24] <- data.frame(scale(newdf))[,1:24]
# Construct linear model
model <- lm(tmrchange ~ ., data=newdf)
# Constructing data set
newdf <- df[,colSums(is.na(df))==0] # Drop columns with NaN
# Load Dependencies and data
library(tidyverse)
library(dplyr)
library(data.table)
df <- read.csv("./data/TSLA.1D.csv")
# Constructing data set
newdf <- df[,colSums(is.na(df))==0] # Drop columns with NaN
newdf = newdf %>%  # Try to predict tommorrow's change with technical indicators
mutate(tmrchange = shift(close-open, n=-1L, fill=NA)) %>%
select(!c(time,Signal,open,high,low,close))
newdf[,1:24] <- data.frame(scale(newdf))[,1:24]
# Construct linear model
model <- lm(tmrchange ~ ., data=newdf)
?step
# Using stepwise selection
stepmodel <- step(model, scope=~., trace=0)
summary(stepmodel)
plot(x=1:768,y=newdf$tmrchange)
abline(stepmodel)
summary(stepmodel)
plot(stepmodel)
# Constructing data set
newdf <- df[,colSums(is.na(df))==0] # Drop columns with NaN
newdf = newdf %>%  # Try to predict tommorrow's change with technical indicators
mutate(tmrchange = shift(close-open, n=-1L, fill=NA)/close) %>%
select(!c(time,Signal,open,high,low,close))
newdf[,1:24] <- data.frame(scale(newdf))[,1:24]
# Construct linear model
model <- lm(tmrchange ~ ., data=newdf)
# Using stepwise selection
stepmodel <- step(model, scope=~., trace=0)
summary(stepmodel)
# Load Dependencies and data
library(tidyverse)
library(dplyr)
library(data.table)
df <- read.csv("./data/TSLA.1D.csv")
# Constructing data set
newdf <- df[,colSums(is.na(df))==0] # Drop columns with NaN
newdf = newdf %>%  # Try to predict tommorrow's change with technical indicators
mutate(tmrchange = shift(close-open, n=-1L, fill=NA)/close) %>%
select(!c(time,Signal,open,high,low,close))
newdf[,1:24] <- data.frame(scale(newdf))[,1:24]
# Constructing data set
newdf <- df[,colSums(is.na(df))==0] # Drop columns with NaN
newdf = newdf %>%  # Try to predict tommorrow's change with technical indicators
mutate(tmrchange = shift(close-open, n=-1L, fill=NA)/close) %>%
select(!c(time,Signal,open,high,low,close))
newdf[,1:24] <- data.frame(scale(newdf))[,1:24]
rm(df)
# Constructing data set
newdf <- df[,colSums(is.na(df))==0] # Drop columns with NaN
# Load Dependencies and data
library(tidyverse)
library(dplyr)
library(data.table)
df <- read.csv("./data/TSLA.1D.csv")
# Constructing data set
newdf <- df[,colSums(is.na(df))==0] # Drop columns with NaN
newdf = newdf %>%  # Try to predict tommorrow's change with technical indicators
mutate(tmrchange = shift(close-open, n=-1L, fill=NA)/close) %>%
select(!c(time,Signal,open,high,low,close))
newdf <- data.frame(scale(newdf))
rm(df)
# Construct linear model
model <- lm(tmrchange ~ ., data=newdf)
# Using stepwise selection
stepmodel <- step(model, scope=~., trace=0)
summary(stepmodel)
plot(stepmodel)
plot(1:768, y=newdf$tmrchange)
plot(1:768, y=newdf$close)
# Load Dependencies and data
library(tidyverse)
library(dplyr)
library(data.table)
df <- read.csv("./data/TSLA.1D.csv")
newdf %>%
ggplot(mapping=aes(x=time, y=close)) +
geom_line()
View(df)
newdf %>%
ggplot(mapping=aes(x=1:768, y=close)) +
geom_line()
df %>%
ggplot(mapping=aes(x=1:768, y=close)) +
geom_line()
View(df)
# Split training and testing set
sp <- 768/2
df_train <- newdf[1:sp,]
df_test <- newdf[sp+1:length(newdf),]
# Split training and testing set
sp <- 768/2
df_train <- newdf[1:sp,]
df_test <- newdf[sp+1:length(newdf),]
rm(newdf)
# Constructing data set
newdf <- df[,colSums(is.na(df))==0] # Drop columns with NaN
newdf = newdf %>%  # Try to predict tommorrow's change with technical indicators
mutate(tmrchange = shift(close-open, n=-1L, fill=NA)/close) %>%
select(!c(time,Signal,open,high,low,close))
newdf <- data.frame(scale(newdf))
# Split training and testing set
sp <- 768/2
df_train <- newdf[1:sp,]
df_test <- newdf[sp+1:dim(newdf)[1],]
rm(newdf)
# Constructing data set
newdf <- df[,colSums(is.na(df))==0] # Drop columns with NaN
newdf = newdf %>%  # Try to predict tommorrow's change with technical indicators
mutate(tmrchange = shift(close-open, n=-1L, fill=NA)/close) %>%
select(!c(time,Signal,open,high,low,close))
newdf <- data.frame(scale(newdf))
# Load Dependencies and data
library(tidyverse)
library(dplyr)
library(data.table)
df <- read.csv("./data/TSLA.1D.csv")
# Constructing data set
newdf <- df[,colSums(is.na(df))==0] # Drop columns with NaN
newdf = newdf %>%  # Try to predict tommorrow's change with technical indicators
mutate(tmrchange = shift(close-open, n=-1L, fill=NA)/close) %>%
select(!c(time,Signal,open,high,low,close))
newdf <- data.frame(scale(newdf))
gc()
# Split training and testing set
sp <- 768/2
df_train <- newdf[1:sp,]
df_test <- newdf[sp+1:dim(newdf)[1],]
# Split training and testing set
sp <- 768/2
df_train <- newdf[1:sp,]
df_test <- newdf[sp+1:,]
# Split training and testing set
sp <- 768/2
df_train <- newdf[1:sp,]
df_test <- newdf[sp+1:end,]
?end
dim(df)
# Split training and testing set
sp <- 768/2
df_train <- newdf[1:sp,]
df_test <- newdf[sp+1:768,]
View(df_test)
View(df_train)
View(newdf)
View(newdf)
# Split training and testing set
sp <- 768/2
df_train <- newdf[1:sp,]
df_test <- newdf[sp+1:767,]
# Split training and testing set
sp <- 768/2
df_train <- newdf[1:sp,]
df_test <- newdf[sp+1,]
# Split training and testing set
sp <- 768/2
df_train <- newdf[1:sp,]
df_test <- newdf[sp+1:sp+2,]
# Split training and testing set
sp <- 768/2
df_train <- newdf[1:sp,]
df_test <- newdf[sp+1:sp+2,]
sp + 1
# Split training and testing set
sp <- 768/2
df_train <- newdf[1:sp,]
df_test <- newdf[sp+1:sp+2,]
sp + 1:sp+2
# Split training and testing set
sp <- 768/2
df_train <- newdf[1:sp,]
df_test <- newdf[sp+1:sp+2,]
sp + 2
# Split training and testing set
sp <- 768/2
df_train <- newdf[1:sp,]
df_test <- newdf[(sp+1):dim(newdf)[1],]
rm(newdf)
# Construct linear model
model <- lm(tmrchange ~ ., data=df_train)
